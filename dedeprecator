#!/usr/bin/env parrot-nqp

INIT {
    pir::load_bytecode("YAML/Tiny.pbc");
}

sub check_pir($file, @regexes) {
    my @deprecations;

    my $fh := pir::new('FileHandle');
    $fh.open($file);
    my $line := 1;
    while $fh.readline -> $l {
        for @regexes -> $regex {
            my $r := $regex[0];
            if $l ~~ / $r / {
                @deprecations.push("$file:$line: { $regex[2] }");
            }
        }
        $line++;
    }
    $fh.close;

    return @deprecations;
}

MAIN(pir::getinterp()[2]);
sub MAIN(@ARGS) {
    my $name := @ARGS.shift;
    my @files;
    my $apiyaml := 'api.yaml';
    USAGE($name) unless pir::elements(@ARGS);
# getopt
    my $arg;
    while pir::elements(@ARGS) {
        $arg := @ARGS.shift;
        if $arg eq '--help' || $arg eq '-h' {
            USAGE($name);
        } elsif $arg eq '--apiyaml' {
            unless pir::elements(@ARGS) {
                say("--apiyaml requires an argument");
                USAGE($name);
            }
            $apiyaml := @ARGS.shift;
        } else {
            @files.push($arg);
        }
    }
# prepare the regexes
    my $parser := YAML::Tiny.new;
    my $api;
    try {
        $api := $parser.read_string(slurp($apiyaml));
        CATCH {
            say("Failed parsing '$apiyaml'\n"
                ~ "Make sure that it exists and is a valid YAML");
            pir::exit(1);
        }
    }
    my @regs_pir;
    for $api[0] {
        if $_<detection> && $_<detection><regex> {
           if $_<detection><regex><pir> {
               my $r := $_<detection><regex><pir>;
                @regs_pir.push(
                    [Regex::P6Regex::Compiler.compile($r), $r, $_<name>]
                );
           }
        }
    }
# check the given files
    for @files -> $f {
        if $f ~~ / '.pir' $ / {
            say(check_pir($f, @regs_pir).join("\n"));
        }
    }
}

sub USAGE($name) {
    say("Usage: $name [--apiyaml <api.yaml file>] <files to check>");
    pir::exit(1);
}

# vim: ft=perl6
